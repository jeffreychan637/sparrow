// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sparrow.proto at 29:1
package edu.berkeley.cs194;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A single message.  Can be either public or private.
 */
public final class Tweet extends Message<Tweet, Tweet.Builder> {
  public static final ProtoAdapter<Tweet> ADAPTER = new ProtoAdapter_Tweet();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ID = 0;

  public static final String DEFAULT_AUTHOR = "";

  public static final String DEFAULT_CONTENT = "";

  public static final String DEFAULT_RECIPIENT = "";

  public static final Boolean DEFAULT_ENCRYPTED = false;

  public static final String DEFAULT_KEY_SYMMETRIC = "";

  public static final String DEFAULT_SIGNATURE = "";

  /**
   * The unique id of the tweet.  Set by the tweet's author.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer id;

  /**
   * The username of the tweet's author.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String author;

  /**
   * The text content of the tweet.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String content;

  /**
   * The username of the recipient.  If set, the message is a private (direct)
   * message.  If not set, the message is a public (broadcast) message.
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String recipient;

  /**
   * DO NOT CHANGE ANYTHING ABOVE THIS LINE.
   * FILL IN (IF NEEDED)
   */
  @WireField(
      tag = 80,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean encrypted;

  @WireField(
      tag = 81,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String key_symmetric;

  @WireField(
      tag = 82,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String signature;

  public Tweet(Integer id, String author, String content, String recipient, Boolean encrypted, String key_symmetric, String signature) {
    this(id, author, content, recipient, encrypted, key_symmetric, signature, ByteString.EMPTY);
  }

  public Tweet(Integer id, String author, String content, String recipient, Boolean encrypted, String key_symmetric, String signature, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.author = author;
    this.content = content;
    this.recipient = recipient;
    this.encrypted = encrypted;
    this.key_symmetric = key_symmetric;
    this.signature = signature;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.author = author;
    builder.content = content;
    builder.recipient = recipient;
    builder.encrypted = encrypted;
    builder.key_symmetric = key_symmetric;
    builder.signature = signature;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Tweet)) return false;
    Tweet o = (Tweet) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(author, o.author)
        && Internal.equals(content, o.content)
        && Internal.equals(recipient, o.recipient)
        && Internal.equals(encrypted, o.encrypted)
        && Internal.equals(key_symmetric, o.key_symmetric)
        && Internal.equals(signature, o.signature);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (author != null ? author.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (recipient != null ? recipient.hashCode() : 0);
      result = result * 37 + (encrypted != null ? encrypted.hashCode() : 0);
      result = result * 37 + (key_symmetric != null ? key_symmetric.hashCode() : 0);
      result = result * 37 + (signature != null ? signature.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (author != null) builder.append(", author=").append(author);
    if (content != null) builder.append(", content=").append(content);
    if (recipient != null) builder.append(", recipient=").append(recipient);
    if (encrypted != null) builder.append(", encrypted=").append(encrypted);
    if (key_symmetric != null) builder.append(", key_symmetric=").append(key_symmetric);
    if (signature != null) builder.append(", signature=").append(signature);
    return builder.replace(0, 2, "Tweet{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Tweet, Builder> {
    public Integer id;

    public String author;

    public String content;

    public String recipient;

    public Boolean encrypted;

    public String key_symmetric;

    public String signature;

    public Builder() {
    }

    /**
     * The unique id of the tweet.  Set by the tweet's author.
     */
    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    /**
     * The username of the tweet's author.
     */
    public Builder author(String author) {
      this.author = author;
      return this;
    }

    /**
     * The text content of the tweet.
     */
    public Builder content(String content) {
      this.content = content;
      return this;
    }

    /**
     * The username of the recipient.  If set, the message is a private (direct)
     * message.  If not set, the message is a public (broadcast) message.
     */
    public Builder recipient(String recipient) {
      this.recipient = recipient;
      return this;
    }

    /**
     * DO NOT CHANGE ANYTHING ABOVE THIS LINE.
     * FILL IN (IF NEEDED)
     */
    public Builder encrypted(Boolean encrypted) {
      this.encrypted = encrypted;
      return this;
    }

    public Builder key_symmetric(String key_symmetric) {
      this.key_symmetric = key_symmetric;
      return this;
    }

    public Builder signature(String signature) {
      this.signature = signature;
      return this;
    }

    @Override
    public Tweet build() {
      if (id == null
          || author == null
          || content == null) {
        throw Internal.missingRequiredFields(id, "id",
            author, "author",
            content, "content");
      }
      return new Tweet(id, author, content, recipient, encrypted, key_symmetric, signature, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Tweet extends ProtoAdapter<Tweet> {
    ProtoAdapter_Tweet() {
      super(FieldEncoding.LENGTH_DELIMITED, Tweet.class);
    }

    @Override
    public int encodedSize(Tweet value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.author)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.content)
          + (value.recipient != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.recipient) : 0)
          + (value.encrypted != null ? ProtoAdapter.BOOL.encodedSizeWithTag(80, value.encrypted) : 0)
          + (value.key_symmetric != null ? ProtoAdapter.STRING.encodedSizeWithTag(81, value.key_symmetric) : 0)
          + (value.signature != null ? ProtoAdapter.STRING.encodedSizeWithTag(82, value.signature) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Tweet value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.author);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.content);
      if (value.recipient != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.recipient);
      if (value.encrypted != null) ProtoAdapter.BOOL.encodeWithTag(writer, 80, value.encrypted);
      if (value.key_symmetric != null) ProtoAdapter.STRING.encodeWithTag(writer, 81, value.key_symmetric);
      if (value.signature != null) ProtoAdapter.STRING.encodeWithTag(writer, 82, value.signature);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Tweet decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.author(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.recipient(ProtoAdapter.STRING.decode(reader)); break;
          case 80: builder.encrypted(ProtoAdapter.BOOL.decode(reader)); break;
          case 81: builder.key_symmetric(ProtoAdapter.STRING.decode(reader)); break;
          case 82: builder.signature(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Tweet redact(Tweet value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
