// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sparrow.proto at 48:1
package edu.berkeley.cs194;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * A message that is sent by the client and server after the handshake to exchange Tweets.
 */
public final class TweetExchange extends Message<TweetExchange, TweetExchange.Builder> {
  public static final ProtoAdapter<TweetExchange> ADAPTER = new ProtoAdapter_TweetExchange();

  private static final long serialVersionUID = 0L;

  /**
   * A list of tweets.
   */
  @WireField(
      tag = 1,
      adapter = "edu.berkeley.cs194.Tweet#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Tweet> tweets;

  public TweetExchange(List<Tweet> tweets) {
    this(tweets, ByteString.EMPTY);
  }

  public TweetExchange(List<Tweet> tweets, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.tweets = Internal.immutableCopyOf("tweets", tweets);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.tweets = Internal.copyOf("tweets", tweets);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TweetExchange)) return false;
    TweetExchange o = (TweetExchange) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(tweets, o.tweets);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (tweets != null ? tweets.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (tweets != null) builder.append(", tweets=").append(tweets);
    return builder.replace(0, 2, "TweetExchange{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<TweetExchange, Builder> {
    public List<Tweet> tweets;

    public Builder() {
      tweets = Internal.newMutableList();
    }

    /**
     * A list of tweets.
     */
    public Builder tweets(List<Tweet> tweets) {
      Internal.checkElementsNotNull(tweets);
      this.tweets = tweets;
      return this;
    }

    @Override
    public TweetExchange build() {
      return new TweetExchange(tweets, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_TweetExchange extends ProtoAdapter<TweetExchange> {
    ProtoAdapter_TweetExchange() {
      super(FieldEncoding.LENGTH_DELIMITED, TweetExchange.class);
    }

    @Override
    public int encodedSize(TweetExchange value) {
      return Tweet.ADAPTER.asRepeated().encodedSizeWithTag(1, value.tweets)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, TweetExchange value) throws IOException {
      if (value.tweets != null) Tweet.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.tweets);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public TweetExchange decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.tweets.add(Tweet.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public TweetExchange redact(TweetExchange value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.tweets, Tweet.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
